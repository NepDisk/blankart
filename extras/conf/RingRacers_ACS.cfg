/*******************************************************************\
	Doom Builder Script highlighting definitions for ACS
\*******************************************************************/

// Compiler settings
compiler = "ringracers_gdcc";
parameters = "--error-file \"acs.err\" --bc-zdacs-script-type lap 5 --include \"%PT\" --include \"%PS\" --output %FO %FI";
resultlump = "BEHAVIOR";

// Editor settings
description = "Ring Racers ACS script";
codepage = 0;
extensions = "acs";
casesensitive = false;
insertcase = 0;				// 0=Normal, 1=Lowercase, 2=Uppercase
lexer = 35;					// CPP-style, case-insensitive
functionopen = "(";
functionclose = ")";
codeblockopen = "{";
codeblockclose = "}";
arrayopen = "[";
arrayclose = "]";
argumentdelimiter = ",";
terminator = ";";
extrawordchars = "#"; // Extra characters to be treated as a part of a word by the Script Editor
//keywordhelp = "http://www.zdoom.org/wiki/index.php?title=%K";
snippetsdir = "acs";
scripttype = 1; //0 = unknown script, 1 = acc, 2 = modeldef, 3 = decorate

keywords
{
	// Directives
	#define = "#define [identifier] [expression]\n"
		"Defines a preprocessor macro. Defines can be\n"
		"used to create a constant variable which can't\n"
		"be changed during run-time.";
	#include = "#include [file]"
		"Defines a preprocessor macro. Defines can be\n"
		"used to create a constant variable which can't\n"
		"be changed during run-time.";
	#library = "#library [name]\n"
		"Defines this file as a library. Other files can\n"
		"use #import to include all of this file's scripts,\n"
		"functions, and libdefines, without needing to\n"
		"compile it into their file.";
	#import = "#import [file]\n"
		"Adds the scripts, functions, and libdefines from\n"
		"an ACS library. Unlike #include, libraries do not\n"
		"get compiled directly into your file.\n";
	#libdefine = "#libdefine [identifier] [expression]\n"
		"Defines a preprocessor macro for a library. Unlike\n"
		"normal defines, other files can access this value\n"
		"if they import this file as a library.";
	#encryptstrings = "#encryptstrings\n"
		"Strings will be scrambled when compiling, so that\n"
		"they aren't directly readable in a hex editor.";
	#nocompact = "#nocompact\n"
		"Disables compiler compression.";
	#region = "#region\n"
		"Starts a collaspable text region for the Script\n"
		"Editor. Ignored by the compiler.";
	#endregion = "#endregion\n"
		"Ends a collaspable text region. See: #region\n"
		"Ignored by the compiler.";

	// Keywords
	if = "if ([expression])";
	else = "else";
	for = "for ([initialize], [condition], [iterate])";
	do = "do";
	while = "while ([expression])";
	until = "until ([expression])";
	break = "break";
	continue = "continue";
	switch = "switch ([expression])";
	case = "case [expression]:";
	default = "default:";
	const = "const";
	function = "function [return type] [identifier] ([arg], [...])";
	script = "script [identifier] ([arg], [...])";
	return = "return [value]\n"
		"Return value for functions.\n"
		"Does not work for scripts.";
	restart = "restart\n"
		"Restarts the current script from the beginning.\n"
		"Does not work for functions.";
	suspend = "suspend\n"
		"Pauses the current script. It can be resumed by\n"
		"activating the same script again.\n"
		"Does not work for functions.";
	terminate = "terminate\n"
		"Ends the current script early.\n"
		"Does not work for functions.";
	special = "special";
	world = "world [type] [index]:[identifier]\n"
		"Sets a wrapper for a hub scope variable.\n"
		"Unused in Ring Racers.";
	global = "global [type] [index]:[identifier]\n"
		"Sets a wrapper for a global scope variable.\n"
		"Unused in Ring Racers.";

	// Types
	void = "void";
	bool = "bool";
	int = "int";
	str = "str";

	// Script modifiers
	OPEN = "script [identifier] OPEN\n"
		"This script will run when the level is initially loaded.";
	ENTER = "script [identifier] ENTER\n"
		"Makes this script run whenever a player enters the game.\n"
		"The activator is set to said player for this script.";
	RESPAWN = "script [identifier] RESPAWN\n"
		"Makes this script run whenever a player respawns.\n"
		"The activator is set to said player for this script.";
	DEATH = "script [identifier] DEATH\n"
		"Makes this script run whenever any player dies.\n"
		"The activator is set to said player for this script.";
	LAP = "script [identifier] LAP\n"
		"Makes this script run whenever a player crosses the finish line.\n"
		"The activator is set to said player for this script.";

	// Specials
	Sector_CopyHeights = "Sector_CopyHeights";
	Light_Copy = "Light_Copy";
	Sector_CopyHeightsMove = "Sector_CopyHeightsMove";
	Sector_MovePlanes = "Sector_MovePlanes";
	Sector_CopyTextures = "Sector_CopyTextures";
	Sector_ChangeTag = "Sector_ChangeTag";
	Line_ChangeFrontSectorTag = "Line_ChangeFrontSectorTag";
	Sector_StopMovement = "Sector_StopMovement";
	Thing_Teleport = "Thing_Teleport";
	Level_SetMusic = "Level_SetMusic";
	PlaySFX = "PlaySFX";
	Console_Execute = "Console_Execute";
	Light_Flicker = "Light_Flicker";
	Light_Pulse = "Light_Pulse";
	Light_Blink = "Light_Blink";
	Light_Fade = "Light_Fade";
	Light_Stop = "Light_Stop";
	Camera_CutAwayView = "Camera_CutAwayView";
	Level_SetSky = "Level_SetSky";
	Level_SetWeather = "Level_SetWeather";
	Thing_SetState = "Thing_SetState";
	Thing_Stop = "Thing_Stop";
	Player_AddScore = "Player_AddScore";
	FOF_StartMovement = "FOF_StartMovement";
	Sector_Crush = "Sector_Crush";
	Thing_SetFlip = "Thing_SetFlip";
	Sector_ChangeScroll = "Sector_ChangeScroll";
	FOF_Shatter = "FOF_Shatter";
	Player_DisableControl = "Player_DisableControl";
	Thing_SetScale = "Thing_SetScale";
	Line_CopyTextures = "Line_CopyTextures";
	Level_StartMetalSonicRace = "Level_StartMetalSonicRace";
	SetUnlockableTrigger = "SetUnlockableTrigger";
	Sector_NextThingState = "Sector_NextThingState";
	Lua_Execute = "Lua_Execute";
	Earthquake = "Earthquake";
	FOF_SetExists = "FOF_SetExists";
	FOF_Crumble = "FOF_Crumble";
	Sector_SetColormap = "Sector_SetColormap";
	SetSkyboxViewpoints = "SetSkyboxViewpoints";
	SetBossActive = "SetBossActive";
	Line_Execute = "Line_Execute";
	Line_ExecuteRandom = "Line_ExecuteRandom";
	FOF_SetAlpha = "FOF_SetAlpha";
	FOF_Fade = "FOF_Fade";
	FOF_StopFade = "FOF_StopFade";
	Sector_FadeColormap = "Sector_FadeColormap";
	Sector_StopColormapFade = "Sector_StopColormapFade";
	Thing_StartTracking = "Thing_StartTracking";
	Thing_StopTracking = "Thing_StopTracking";
	Prompt_Execute = "Prompt_Execute";
	Player_AddRings = "Player_AddRings";
	Thing_Spawn = "Thing_Spawn";
	Level_StopClock = "Level_StopClock";
	Thing_Dye = "Thing_Dye";
	TriggerEggCapsule = "TriggerEggCapsule";
	Level_SetFailed = "Level_SetFailed";
	Sector_SetLight = "Sector_SetLight";
	Line_SetArg = "Line_SetArg";
	Sector_SetGravity = "Sector_SetGravity";
	Polyobj_DoorSlide = "Polyobj_DoorSlide";
	Polyobj_DoorSwing = "Polyobj_DoorSwing";
	Polyobj_Move = "Polyobj_Move";
	Polyobj_Rotate = "Polyobj_Rotate";
	Polyobj_MoveByWaypoints = "Polyobj_MoveByWaypoints";
	Polyobj_SetVisibilityTangibility = "Polyobj_SetVisibilityTangibility";
	Polyobj_SetAlpha = "Polyobj_SetAlpha";
	Polyobj_FadeAlpha = "Polyobj_FadeAlpha";
	Sector_ToggleWaypoints = "Sector_ToggleWaypoints";

	// Functions
	Delay = "void Delay(int tics)\n"
		"Pauses the current script for a period of time.\n"
		"Does not work for functions.";

	TagWait = "void TagWait(int tag)\n"
		"Pauses the current script until the tagged sectors finish moving.\n"
		"Does not work for functions.";

	PolyWait = "void PolyWait(int polyID)\n"
		"Pauses the current script until a PolyObject finishes moving.\n"
		"Does not work for functions.";

	ScriptWait = "void ScriptWait(str script)\n"
		"Pauses the current script until another script finishes.\n"
		"Does not work for functions.";

	ACS_Execute = "void ACS_Execute(str script, int arg1, ...)\n"
		"Run a script. If the script is already running, it will not run again.";

	ACS_ExecuteAlways = "void ACS_ExecuteAlways(str script, int arg1, ...)\n"
		"Run a script. Unlike ACS_Execute, multiple copies of a script can be run,\n"
		"but ACS_Suspend and ACS_Terminate cannot be used on it.";

	ACS_ExecuteWait = "void ACS_ExecuteWait(str script, int arg1, ...)\n"
		"Run a script, and then pause the current script until it finishes.";

	ACS_ExecuteWithResult = "int ACS_ExecuteWithResult(str script, int arg1, ...)\n"
		"Run a script, and then returns the special result value.\n"
		"The special result value can be set by using SetResultValue().";

	ACS_Suspend = "void ACS_Suspend(str script)\n"
		"Pauses another script by its numerical ID.\n"
		"It can be resumed by activating the same script again.";

	ACS_Terminate = "void ACS_Terminate(str script)\n"
		"Ends another script early by its numerical ID.";

	Random = "int Random(int min, int max)\n"
		"Generates a random number between min and max.";

	ThingCount = "int ThingCount(str type, int tag)\n"
		"Returns the number of objects of the specified type in the map.";

	ChangeFloor = "void ChangeFloor(int tag, str texture)\n"
		"Changes the floor texture of all of the tagged sectors.";

	ChangeCeiling = "void ChangeCeiling(int tag, str texture)\n"
		"Changes the ceiling texture of all of the tagged sectors.";

	LineSide = "int LineSide(void)\n"
		"Returns either LINE_FRONT or LINE_BACK depending on the\n"
		"side of the line that activated the script.\n"
		"Always returns LINE_FRONT if the line doesn't exist.";

	ClearLineSpecial = "void ClearLineSpecial(void)\n"
		"Sets the activating line's special to 0, for one-time effects.";

	Print = "void Print([type]:[expression], [...])\n"
		"Print will display a message to the screen.\n"
		"It will only display for the activator of the script.\n"
		"For printing to all players, use PrintBold.";

	PlayerCount = "int PlayerCount(void)\n"
		"Counts the number of players currently playing.";

	GameType = "int GameType(void)\n"
		"Returns the current gametype ID.";

	GameSpeed = "int GameSpeed(void)\n"
		"Returns the current game speed.";

	Timer = "int Timer(void)\n"
		"Returns the number of tics elapsed since the level started.";

	SectorSound = "void SectorSound(str sound, int volume)\n"
		"Plays a sound effect in the activating sector.";

	AmbientSound = "void AmbientSound(str sound, int volume)\n"
		"Plays a sound effect globally.";

	SetLineTexture = "void SetLineTexture(int tag, int side, int part, str texture)\n"
		"Changes the texture for the tagged lines.\n"
		"side is either SIDE_FRONT or SIDE_BACK.\n"
		"part is either TEXTURE_TOP, TEXTURE_MIDDLE, or TEXTURE_BOTTOM.";

	SetLineSpecial = "void SetLineSpecial(int tag, int special, int arg1, ...)\n"
		"Changes the special and arguments for the tagged lines.\n"
		"special can be set to the actual name of the special.\n"
		"Any number of args can be set.";

	ThingSound = "void ThingSound(int tag, str sound, int volume)\n"
		"Plays a sound effect on the tagged things.";

	PrintBold = "void PrintBold([type]:[expression], [...])\n"
		"Print will display a message to the screen.\n"
		"It will display for all players in the game.\n"
		"For printing to only the activator, use Print.";

	Log = "void Log([type]:[expression], [...])\n"
		"Log will display a message in the console.\n"
		"It will display for only the activating player.";
}

constants
{
	TRUE;
	FALSE;

	ON;
	OFF;

	YES;
	NO;

	LINE_FRONT;
	LINE_BACK;

	SIDE_FRONT;
	SIDE_BACK;

	TEXTURE_TOP;
	TEXTURE_MIDDLE;
	TEXTURE_BOTTOM;

	GAMETYPE_RACE;
	GAMETYPE_BATTLE;

	GAMESPEED_EASY;
	GAMESPEED_NORMAL;
	GAMESPEED_HARD;
}
